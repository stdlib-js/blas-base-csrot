{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/csrot.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction csrot( N, cx, strideX, offsetX, cy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\tc = f32( c );\n\ts = f32( s );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c*viewX[ ix ] ) + f32( s*viewY[ iy ] );\n\t\tviewY[ iy ] = f32( c*viewY[ iy ] ) - f32( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = f32( c*viewX[ ix+1 ] ) + f32( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = f32( c*viewY[ iy+1 ] ) - f32( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nmodule.exports = csrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\nfunction csrot( N, cx, strideX, cy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, cx, strideX, ix, cy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = csrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar csrot = require( './csrot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( csrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = csrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to apply a plane rotation.\n*\n* @module @stdlib/blas-base-csrot\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var csrot = require( '@stdlib/blas-base-csrot' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var csrot = require( '@stdlib/blas-base-csrot' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot.ndarray( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n* // cx => <Complex64Array>[ ~0.8, ~1.6, ~2.4, ~3.2, 4.0, ~4.8, ~5.6, ~6.4 ]\n* // cy => <Complex64Array>[ ~-0.6, ~-1.2, ~-1.8, ~-2.4, -3.0, ~-3.6, ~-4.2, ~-4.8 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar csrot;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tcsrot = main;\n} else {\n\tcsrot = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = csrot;\n\n// exports: { \"ndarray\": \"csrot.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,QAAS,wCAAyC,EACxDC,EAAc,QAAS,4CAA6C,EA6BxE,SAASC,EAAOC,EAAGC,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAASC,EAAGC,EAAI,CACrE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKhB,GAAK,EACT,OAAOI,EAUR,IARAK,EAAQX,EAAaG,EAAI,CAAE,EAC3BS,EAAQZ,EAAaM,EAAI,CAAE,EAC3BG,EAAIV,EAAKU,CAAE,EACXC,EAAIX,EAAKW,CAAE,EACXI,EAAKV,EAAU,EACfW,EAAKR,EAAU,EACfS,EAAKX,EAAU,EACfY,EAAKT,EAAU,EACTU,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBL,EAAMd,EAAKU,EAAEE,EAAOK,CAAG,CAAE,EAAIjB,EAAKW,EAAEE,EAAOK,CAAG,CAAE,EAChDL,EAAOK,CAAG,EAAIlB,EAAKU,EAAEG,EAAOK,CAAG,CAAE,EAAIlB,EAAKW,EAAEC,EAAOK,CAAG,CAAE,EACxDL,EAAOK,CAAG,EAAIH,EAEdA,EAAMd,EAAKU,EAAEE,EAAOK,EAAG,CAAE,CAAE,EAAIjB,EAAKW,EAAEE,EAAOK,EAAG,CAAE,CAAE,EACpDL,EAAOK,EAAG,CAAE,EAAIlB,EAAKU,EAAEG,EAAOK,EAAG,CAAE,CAAE,EAAIlB,EAAKW,EAAEC,EAAOK,EAAG,CAAE,CAAE,EAC9DL,EAAOK,EAAG,CAAE,EAAIH,EAEhBG,GAAMF,EACNG,GAAMF,EAEP,OAAOT,CACR,CAKAR,EAAO,QAAUG,IC3FjB,IAAAkB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA2Bd,SAASC,EAAOC,EAAGC,EAAIC,EAASC,EAAIC,EAASC,EAAGC,EAAI,CACnD,IAAIC,EAAKV,EAAeG,EAAGE,CAAQ,EAC/BM,EAAKX,EAAeG,EAAGI,CAAQ,EACnC,OAAON,EAASE,EAAGC,EAAIC,EAASK,EAAIJ,EAAIC,EAASI,EAAIH,EAAGC,CAAE,CAC3D,CAKAV,EAAO,QAAUG,IC3DjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAU,IAKdF,EAAaC,EAAO,UAAWC,CAAQ,EAKvCH,EAAO,QAAUE,ICgBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAQD,EAERC,EAAQC,EAMT,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "f32", "reinterpret", "csrot", "N", "cx", "strideX", "offsetX", "cy", "strideY", "offsetY", "c", "s", "viewX", "viewY", "tmp", "sx", "sy", "ix", "iy", "i", "require_csrot", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "csrot", "N", "cx", "strideX", "cy", "strideY", "c", "s", "ix", "iy", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "csrot", "ndarray", "join", "tryRequire", "isError", "main", "csrot", "tmp"]
}
