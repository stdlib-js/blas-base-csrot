{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/csrot.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-0.6\n*\n* var im = imagf( z );\n* // returns ~-1.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction csrot( N, cx, strideX, offsetX, cy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\tc = f32( c );\n\ts = f32( s );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = f32( c*viewX[ ix ] ) + f32( s*viewY[ iy ] );\n\t\tviewY[ iy ] = f32( c*viewY[ iy ] ) - f32( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = f32( c*viewX[ ix+1 ] ) + f32( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = f32( c*viewY[ iy+1 ] ) - f32( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* csrot( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-0.6\n*\n* var im = imagf( z );\n* // returns ~-1.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction csrot( N, cx, strideX, cy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, cx, strideX, ix, cy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport csrot from './csrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( csrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default csrot;\n"],"names":["csrot","N","cx","strideX","offsetX","cy","strideY","offsetY","c","s","viewX","viewY","tmp","sx","sy","ix","iy","i","reinterpret","f32","ndarray","stride2offset","setReadOnly"],"mappings":";;mbAsEA,SAASA,EAAOC,EAAGC,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAASC,EAAGC,GACjE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKhB,GAAK,EACT,OAAOI,EAUR,IARAK,EAAQQ,EAAahB,EAAI,GACzBS,EAAQO,EAAab,EAAI,GACzBG,EAAIW,EAAKX,GACTC,EAAIU,EAAKV,GACTI,EAAe,EAAVV,EACLW,EAAe,EAAVR,EACLS,EAAe,EAAVX,EACLY,EAAe,EAAVT,EACCU,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBL,EAAMO,EAAKX,EAAEE,EAAOK,IAASI,EAAKV,EAAEE,EAAOK,IAC3CL,EAAOK,GAAOG,EAAKX,EAAEG,EAAOK,IAASG,EAAKV,EAAEC,EAAOK,IACnDL,EAAOK,GAAOH,EAEdA,EAAMO,EAAKX,EAAEE,EAAOK,EAAG,IAAQI,EAAKV,EAAEE,EAAOK,EAAG,IAChDL,EAAOK,EAAG,GAAMG,EAAKX,EAAEG,EAAOK,EAAG,IAAQG,EAAKV,EAAEC,EAAOK,EAAG,IAC1DL,EAAOK,EAAG,GAAMH,EAEhBG,GAAMF,EACNG,GAAMF,EAEP,OAAOT,CACR,CCpCA,SAASL,EAAOC,EAAGC,EAAIC,EAASE,EAAIC,EAASE,EAAGC,GAG/C,OAAOW,EAASnB,EAAGC,EAAIC,EAFdkB,EAAepB,EAAGE,GAESE,EAAIC,EAD/Be,EAAepB,EAAGK,GAC0BE,EAAGC,EACzD,CC3CAa,EAAAtB,EAAA,UAAAoB"}